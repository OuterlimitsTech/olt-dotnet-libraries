# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
  # - none
  # - develop
  - master

pr: none

variables:
  # GitVersion.SemVer: ''
  majorVersion: 5
  revisionVersion: 1
  revision: $[counter(variables['5.1'], 0)]
  packageVersion: '$(majorVersion).$(revisionVersion).$(revision).0'

jobs:
  - job: 'build'

    # dependsOn: 'iac_build'

    variables:
      solution: 'OLT.Libraries.sln'
      buildConfiguration: Release

    pool:
      # vmImage: 'windows-latest'
      vmImage: 'ubuntu-latest'

    steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here

            echo Package Version = '$(packageVersion)'
            echo Package Version = '$(Build.SourcesDirectory)'

      - task: DotNetCoreCLI@2
        displayName: 'Resore Nuget'
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'select'
          vstsFeed: 'olt-packages'

      - task: DotNetCoreCLI@2
        displayName: 'Running Test'
        inputs:
          command: 'test'
          projects: '$(solution)'
          testRunTitle: 'Core Unit Test'
          arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage"'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Test Coverage Results [$(Agent.TempDirectory)]'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/**/*coverage.cobertura.xml'
          # reportDirectory: '$(Agent.TempDirectory)/CodeCoverage/'

      - task: DotNetCoreCLI@2
        displayName: 'Build'
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '--configuration $(BuildConfiguration)'
          versioningScheme: byEnvVar
          versionEnvVar: 'packageVersion'
          # versionEnvVar: 'GitVersion.SemVer'

      - task: CopyFiles@2
        displayName: 'Copy $(Build.SourcesDirectory) to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.nupkg'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          flattenFolders: true

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: 'Publish Package Artifact'
        artifact: 'olt-nuget-packages'

      - task: NuGetCommand@2
        displayName: 'Publish Nuget Package'
        condition: eq( variables['Build.SourceBranchName'], 'master' )
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'OLT Public Nuget'