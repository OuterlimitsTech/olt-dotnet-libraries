# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
   branches:
    include:
      - '*'
  # - none
  # - develop
  # - master

pr: none

variables:
  - group: key-vault-variables
  - group: olt-smtp
  - group: olt-send-grid

jobs:
  - job: 'build'

    # dependsOn: 'iac_build'

    variables:
      solution: 'OLT.Libraries.sln'
      buildConfiguration: Release

    pool:
      vmImage: 'windows-latest'
      # vmImage: 'ubuntu-latest'

    steps:
      - task: gitversion/setup@0
        displayName: Confiure Git Version
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Determine Version Number

      # https://medium.com/purplebricks-digital/getting-code-coverage-showing-in-sonar-cloud-99a2295407b3
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloud Olt Libs'
          organization: 'outerlimitstech'
          scannerMode: 'MSBuild'
          projectKey: 'OuterlimitsTech_olt-dotnet-libraries'
          projectVersion: '$(GitVersion.NuGetVersionV2)'
          extraProperties: |
            sonar.exclusions=**/obj/**,**/*.dll
            sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/**/*.trx
            sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml

      - task: Bash@3
        displayName: 'Echo of some stuff'
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here

            echo NuGetVersionV2 = $(GitVersion.NuGetVersionV2)
            echo Package Version = '$(packageVersion)'
            echo Package Version = '$(Build.SourcesDirectory)'

      - task: DotNetCoreCLI@2
        displayName: 'Resore Nuget'
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'select'
          vstsFeed: 'olt-packages'


      - task: DotNetCoreCLI@2
        displayName: 'Building Solution'
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '--configuration $(buildConfiguration) -p:Version=$(GitVersion.AssemblySemVer) --no-restore'


      - task: DotNetCoreCLI@2
        displayName: 'Packing Nuget Packages'
        inputs:
          command: 'pack'
          projects: '$(solution)'
          nobuild: true
          packDirectory: '$(Build.ArtifactStagingDirectory)'
          versioningScheme: byEnvVar
          versionEnvVar: GitVersion.NuGetVersionV2

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: 'Publish Package Artifact'
        artifact: 'olt-nuget-packages-$(GitVersion.NuGetVersionV2)'

      - task: DotNetCoreCLI@2
        displayName: 'Running Test'
        env:
          SMTP_HOST: $(smtp-host)
          SMTP_USERNAME: $(smtp-username)
          SMTP_PASSWORD: $(smtp-password)
          SMTP_PORT: $(smtp-port)
          SMTP_FROM_ADDRESS: $(smtp-from-address)
          SMTP_TO_ADDRESS: $(smtp-to-address)
          BUILD_VERSION: $(GitVersion.NuGetVersionV2)
        inputs:
          command: test
          # projects: '$(solution)'
          nobuild: true
          projects: '**/*Test*.csproj'
          testRunTitle: 'OLT Library Nuget Unit Test - $(GitVersion.NuGetVersionV2)'
          arguments: '--configuration $(BuildConfiguration) --no-build /p:CollectCoverage=true "/p:CoverletOutputFormat=\"opencover,Cobertura\"" /p:CoverletOutput=$(Agent.TempDirectory)/coverage/ /p:MergeWith=$(Agent.TempDirectory)/coverage/ --collect:"Code coverage"'
          # arguments: '--configuration $(BuildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Agent.TempDirectory)/coverage/ /p:MergeWith=$(Agent.TempDirectory)/coverage/ --collect:"Code coverage"'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '$(Agent.TempDirectory)/**/*.trx'
          mergeTestResults: true
          testRunTitle: 'OLT Library Nuget Test Results - $(GitVersion.NuGetVersionV2)'


      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Test Coverage Results [$(Agent.TempDirectory)]'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
          # reportDirectory: $(Agent.TempDirectory)/coverage

      - task: SonarCloudAnalyze@1
        displayName: 'Sonar Cloud Analyze'

      - task: SonarCloudPublish@1
        displayName: 'Sonar Cloud Publish'
        inputs:
          pollingTimeoutSec: '300'

      - task: NuGetCommand@2
        displayName: 'Publish Nuget Package - Internal'
        condition: eq( variables['Build.SourceBranchName'], 'develop' )
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: 'olt-packages'

      - task: NuGetCommand@2
        displayName: 'Publish Nuget Package - Public'
        condition: eq( variables['Build.SourceBranchName'], 'master' )
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'OLT Public Nuget'

      - task: GitHubRelease@1
        displayName: 'GitHub Release'
        continueOnError: true
        condition: eq( variables['Build.SourceBranchName'], 'master' )
        inputs:
          gitHubConnection: 'github.com_chrisstraw'
          repositoryName: 'OuterlimitsTech/olt-dotnet-libraries'
          action: 'create'
          target: 'v$(GitVersion.NuGetVersionV2)'
          tagSource: 'gitTag'
          assets: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
          changeLogCompareToRelease: 'lastFullRelease'
          changeLogType: 'commitBased'