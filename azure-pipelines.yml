# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger: 
   branches:
    include:
      - '*'
  # - none
  # - develop
  # - master

pr: none

variables:  
  - group: key-vault-variables

jobs:
  - job: 'build'

    # dependsOn: 'iac_build'

    variables:
      solution: 'OLT.Libraries.sln'
      buildConfiguration: Release

    pool:
      # vmImage: 'windows-latest'
      vmImage: 'ubuntu-latest'

    steps:
      # - task: gitversion/setup@0
      #   displayName: Confiure Git Version
      #   inputs:
      #     versionSpec: '5.x'

      # - task: gitversion/execute@0
      #   displayName: Determine Version Number

      # - task: Bash@3
      #   displayName: 'Console Echo of some stuff'
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       # Write your commands here
            
      #       echo NuGetVersionV2 = $(GitVersion.NuGetVersionV2)
      #       echo Package Version = '$(packageVersion)'
      #       echo Package Version = '$(Build.SourcesDirectory)'

      # - task: DotNetCoreCLI@2
      #   displayName: 'Resore Nuget'
      #   inputs:
      #     command: 'restore'
      #     projects: '$(solution)'
      #     feedsToUse: 'select'
      #     vstsFeed: 'olt-packages'


      # - task: DotNetCoreCLI@2
      #   displayName: 'Building Solution'
      #   inputs:
      #     command: 'build'
      #     projects: '$(solution)'
      #     arguments: '--configuration $(buildConfiguration) -p:Version=$(GitVersion.AssemblySemVer)'
      #     # arguments: '--configuration $(BuildConfiguration)'
      #     # versioningScheme: byEnvVar
      #     # versionEnvVar: GitVersion.NuGetVersionV2
      #     # versionEnvVar: 'GitVersion.SemVer'

      # - task: DotNetCoreCLI@2
      #   displayName: 'Packing Nuget Packages'
      #   inputs:
      #     command: 'pack'
      #     projects: '$(solution)'
      #     nobuild: true
      #     packDirectory: '$(Build.ArtifactStagingDirectory)'
      #     versioningScheme: byEnvVar
      #     versionEnvVar: GitVersion.NuGetVersionV2

      # # - task: CopyFiles@2
      # #   displayName: 'Copy $(Build.SourcesDirectory) to: $(Build.ArtifactStagingDirectory)'
      # #   inputs:
      # #     SourceFolder: '$(Build.SourcesDirectory)'
      # #     Contents: '**/*.nupkg'
      # #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
      # #     flattenFolders: true

      # - publish: $(Build.ArtifactStagingDirectory)
      #   displayName: 'Publish Package Artifact'
      #   artifact: 'olt-nuget-packages-$(GitVersion.NuGetVersionV2)'

      # - task: DotNetCoreCLI@2
      #   displayName: 'Running Test'
      #   inputs:
      #     command: 'test'
      #     projects: '$(solution)'
      #     testRunTitle: 'Core Unit Test'
      #     arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage"'

      # - task: PublishCodeCoverageResults@1
      #   displayName: 'Publish Test Coverage Results [$(Agent.TempDirectory)]'
      #   inputs:
      #     codeCoverageTool: 'Cobertura'
      #     summaryFileLocation: '$(Agent.TempDirectory)/**/*coverage.cobertura.xml'
      #     # reportDirectory: '$(Agent.TempDirectory)/CodeCoverage/'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            dotnet tool install --global dotnet-sonarscanner --version 5.2.2
            dotnet sonarscanner begin /o:outerlimitstech /k:OuterlimitsTech_olt-dotnet-libraries /d:sonar.host.url=https://sonarcloud.io /d:sonar.login="$(ado-sonarcloud-token)"
            dotnet build $(solution) --configuration Release
            dotnet sonarscanner end

      # - task: SonarCloudPrepare@1
      #   inputs:
      #     SonarCloud: 'SonarCloud Olt Libs'
      #     organization: 'outerlimitstech'
      #     scannerMode: 'CLI'
      #     configMode: 'manual'
      #     cliProjectKey: 'outerlimitstech'
      #     cliProjectName: 'olt-dotnet-libraries'
      #     cliSources: '.'

      - task: NuGetCommand@2
        displayName: 'Publish Nuget Package - Internal'
        condition: eq( variables['Build.SourceBranchName'], 'develop' )
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: 'olt-packages'

      - task: NuGetCommand@2
        displayName: 'Publish Nuget Package - Public'
        condition: eq( variables['Build.SourceBranchName'], 'master' )
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'OLT Public Nuget'